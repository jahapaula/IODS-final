summary(pca_a)
# draw a biplot of the principal component representation and the original variables
biplot(pca_a, choices = 1:2, cex = c(0.7, 1), col = c("grey40", "deeppink2"), main = " ", sub = "Figure 1")
#fig.cap = "caption"
ss16.asv <- dplyr::select(ss16, starts_with("k1."), starts_with("k51."))
# transform all factors to numeric
for(i in c(1:ncol(ss16.asv))) {
ss16.asv[,i] <- as.numeric(ss16.asv[,i])
}
# deal with missing values here!!
# print out a completeness indicator of the data
complete.cases(ss16.asv)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.asv[-1], comp = complete.cases(ss16.asv))
# filter out all rows with NA values
ss16.asv_ <- filter(ss16.asv, complete.cases(ss16.asv))
# standardize the variables
ss16.asv_std <- scale(ss16.asv_)
# perform principal component analysis (with the SVD method)
pca_a <- prcomp(ss16.asv_std)
summary(pca_a)
# draw a biplot of the principal component representation and the original variables
biplot(pca_a, choices = 1:2, cex = c(0.7, 1), col = c("grey40", "deeppink2"), main = " ", sub = "Figure 1")
#fig.cap = "caption"
biplot(pca_1, choices = 1:2, cex = c(0.7, 1), col = c("grey40", "deeppink2"), main = " ", sub = "Figure 1")
View(dataset.labels)
knitr::opts_chunk$set(echo = TRUE)
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
library(foreign)
library(dplyr)
library(ggplot2)
library(GGally)
#library(stringr)
#library(tidyr)
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
# https://druedin.com/2015/07/14/overcoming-warnings-when-importing-spss-files-to-r/
library(foreign)
library(dplyr)
library(ggplot2)
library(GGally)
library(stringr)
library(tidyr)
ss2016 <- read.spss("15618_SuomiSyö_2016.sav", to.data.frame=TRUE, use.value.labels = T)#, reencode = "macintosh") piti tehdä jotain mutta eipä toimi
# saving variable names to a diff dataset just to make it easier to check them
# encoding seems not to work
dataset.labels <- as.data.frame(attr(ss2016, "variable.labels"), encoding="macintosh")
str(dataset.labels)
# selecting the attitude statements for further analysis
ss2016.sub <- dplyr::select(ss2016, k17.5, k67_12, k67_15, k67_16, suuralue, supu, ika, starts_with("k1."), starts_with("k18a_"), starts_with("k63."), starts_with("k51."))
#transforming diet questions to binary variables
ss2016.sub <- mutate(ss2016.sub, lihaton = k67_12 == 12, kasvis = k67_15 == 15, vegaani = k67_16 == 16)
ss2016.sub <- dplyr::select(ss2016.sub, -k67_12, -k67_15, -k67_16)
#The Jungerian excursion, that is, went elsewhere to remove all ääkköset after trying multple different ways to fix the encoding in R
write.csv(ss2016.sub, "ss2016sub.csv")
ss16 <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# creating a sub dataset with attitude factors plus demo
ss16.atti <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k1."))
# dataset with attitude variables only
ss16.att <- dplyr::select(ss16, starts_with("k1."))
# dataset with viisi tärkeintä ominaisuutta ruoalla
ss16.attr <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k18a"))
# transform all factors to numeric
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
# deal with missing values here!!
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
### Trying out an MCA with the food attribute variables
library(FactoMineR)
# removing some un-interesting variables
tea_time2 <- dplyr::select(tea_time, -price, -How)
# multiple correspondence analysis
mca_sub <- MCA(ss16.attr, graph = F,  na.method="NA")
# summary of the model
summary(mca_sub)
dimdesc(mca_sub)
# visualize MCA
plot(mca_sub, invisible=c("ind"), habillage = "quali")
# plot(mca, invisible=c("ind","var"))
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
summary(ss16full$ika)
str(ss16full$ika)
mean(ss16full$ika)
?mean
summary(ss16full$ika)
mean(ss16full$ika)
ika <- as.numeric(ss16full$ika)
mean(ika)
summary(ss16full$ika)
summary(ss16full$supu)
ggpairs(ss16)
summary(ss16)
summary(ss16.atti)
### PCA for food attitutdes questions
# perform principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# draw a biplot of the principal component representation and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.7, 1), col = c("grey40", "deeppink2"), main = " ", sub = "Figure 1. PCA of the food statements")
#fig.cap = "caption"
biplot(pca_1, choices = 1:2, cex = c(0.9, 1), col = c("grey40", "deeppink2"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = 1:2, cex = c(0.9, 1), col = c("grey20", "deeppink2"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = 1:2, cex = c(0.9, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = 1:2, cex = c(0.5, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
# principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# a biplot of the principal components and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
#fig.cap = "caption"
biplot(pca_1, choices = 1:3, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = 1,3, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = 2:3, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(1,2), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(1,3), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(2,3), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(3,4), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
# principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# a biplot of the principal components 1&2 and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
#fig.cap = "caption"
# a biplot of the principal components 1&3 and the original variables
#biplot(pca_1, choices = c(3,4), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
prop = prop.table(ss16.att,margin=1)
prop = prop.table(ss16.att_,margin=1)
install.packages("likert")
library(likert)                                                                                                                                                                                                                                                                                    panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "white"),
axis.text.x=element_text(angle=90,hjust=1,vjust=0.5))`
library(likert)
likert(ss16.att)
ss16.att <- dplyr::select(ss16, starts_with("k1."))
likert(ss16.att)
ss16 <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
ss16.att <- dplyr::select(ss16, starts_with("k1."))
likert(ss16.att)
ss16bar <- likert(ss16.att)
plot(ss16bar)
oss2016 <- read.spss("15618_SuomiSyö_2016.sav", to.data.frame=TRUE, use.value.labels = T)#, reencode = "macintosh") piti tehdä jotain mutta eipä toimi
oss2016att <- dplyr::select(oss2016, starts_with("k1."))
ss16bar <- likert(oss2016att)
plot(ss16bar)
ss2016att <- dplyr::select(ss16full, starts_with("k1."))
library(likert)
ss2016att <- dplyr::select(ss16full, starts_with("k1."))
ss2016bar <- likert(ss2016att)
plot(ss16bar)
library(likert)
ss2016att <- dplyr::select(ss16full, starts_with("k1."))
ss2016bar <- likert(ss2016att)
plot(ss2016bar)
View(ss16.atti)
str(ss16.att)
str(ss16.att$k1.1)
summary(ss16.att$k1.1)
ss16.att <- dplyr::select(ss16, starts_with("k1."))
as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
# deal with missing values here!!
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
### Trying out an MCA with the food attribute variables
library(FactoMineR)
# removing some un-interesting variables
tea_time2 <- dplyr::select(tea_time, -price, -How)
# multiple correspondence analysis
mca_sub <- MCA(ss16.attr, graph = F,  na.method="NA")
# summary of the model
summary(mca_sub)
dimdesc(mca_sub)
# visualize MCA
plot(mca_sub, invisible=c("ind"), habillage = "quali")
as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
ss16.att <- dplyr::select(ss16, starts_with("k1."))
as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
# deal with missing values here!!
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
### Trying out an MCA with the food attribute variables
library(FactoMineR)
# removing some un-interesting variables
tea_time2 <- dplyr::select(tea_time, -price, -How)
# multiple correspondence analysis
mca_sub <- MCA(ss16.attr, graph = F,  na.method="NA")
# summary of the model
summary(mca_sub)
dimdesc(mca_sub)
# visualize MCA
plot(mca_sub, invisible=c("ind"), habillage = "quali")
ss16.att <- dplyr::select(ss16, starts_with("k1."))
as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
ss16att$k1.1 <- as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
# deal with missing values here!!
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
### Trying out an MCA with the food attribute variables
library(FactoMineR)
# removing some un-interesting variables
tea_time2 <- dplyr::select(tea_time, -price, -How)
# multiple correspondence analysis
mca_sub <- MCA(ss16.attr, graph = F,  na.method="NA")
# summary of the model
summary(mca_sub)
dimdesc(mca_sub)
# visualize MCA
plot(mca_sub, invisible=c("ind"), habillage = "quali")
ss16.att <- dplyr::select(ss16, starts_with("k1."))
ss16att$k1.1 <- as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta"))
ss16att$k1.1 <- as.numeric(ss16att$k1.1(f, levels=c("Taysin eri mielta.","Melko eri mielta","Ei samaa eika eri mielta","Melko samaa mielta","Taysin samaa mielta")))
levels(ss16.att)
levels(ss16.att$k1.1)
ss16.att$k1.1 = factor(ss16.att$k1.1,levels(x)[c(4,2,1,3,5)])
ss16.att$k1.1 = factor(ss16.att$k1.1,levels(ss16.att$k1.1)[c(4,2,1,3,5)])
ss16.att <- dplyr::select(ss16, starts_with("k1."))
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] = factor(ss16.att[,i],levels(ss16.att[,i])[c(4,2,1,3,5)])
}
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
library(foreign)
library(dplyr)
library(ggplot2)
library(GGally)
#library(stringr)
#library(tidyr)
# load the full dataset for the demographic statistics
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# load the subset of data with the statement variables only
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
summary(ss16full$ika)
summary(ss16full$supu)
library(likert)
ss2016att <- dplyr::select(ss16full, starts_with("k1."))
ss2016bar <- likert(ss2016att)
plot(ss2016bar)
# principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# a biplot of the principal components 1&2 and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
# principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# a biplot of the principal components 1&2 and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(2,3), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
biplot(pca_1, choices = c(2,4), cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
# principal component analysis (with the SVD method)
pca_1 <- prcomp(ss16)
summary(pca_1)
pca_1
# a biplot of the principal components 1&2 and the original variables
biplot(pca_1, choices = 1:2, cex = c(0.8, 1), col = c("grey60", "blue"), main = " ", sub = "Figure 1. PCA of the food statements")
library(dplyr)
### data wrangling script for IODS final project
### Salla-Maaria Laaksonen
# https://druedin.com/2015/07/14/overcoming-warnings-when-importing-spss-files-to-r/
library(foreign)
library(dplyr)
ss2016 <- read.spss("15618_SuomiSyö_2016.sav", to.data.frame=TRUE, use.value.labels = T)#, reencode = "macintosh") piti tehdä jotain mutta eipä toimi
# saving variable names to a diff dataset just to make it easier to check them
# encoding seems not to work
dataset.labels <- as.data.frame(attr(ss2016, "variable.labels"), encoding="macintosh")
str(dataset.labels)
# selecting the attitude statements for further analysis
# these were not all used in the final analysis
ss2016.sub <- dplyr::select(ss2016, k17.5, k67_12, k67_15, k67_16, suuralue, supu, ika, starts_with("k1."), starts_with("k18a_"), starts_with("k63."), starts_with("k51."))
#transforming diet questions to binary variables
ss2016.sub <- mutate(ss2016.sub, lihaton = k67_12 == 12, kasvis = k67_15 == 15, vegaani = k67_16 == 16)
ss2016.sub <- dplyr::select(ss2016.sub, -k67_12, -k67_15, -k67_16)
#The Jungerian excursion, that is, went elsewhere to remove all ääkköset after trying multple different ways to fix the encoding in R
write.csv(ss2016.sub, "ss2016sub.csv")
#### Generating the subset for PCA ####
# creating a sub dataset with attitude factors plus demo
ss16.atti <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k1."))
# dataset with attitude variables only
ss16.att <- dplyr::select(ss16, starts_with("k1."))
# dataset with viisi tärkeintä ominaisuutta ruoalla
# ss16.attr <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k18a"))
# https://www.r-bloggers.com/reorder-factor-levels/
#ss16.att$k1.1 = factor(ss16.att$k1.1,levels(ss16.att$k1.1)[c(4,2,1,3,5)])
# reorder all factor levels
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] = factor(ss16.att[,i],levels(ss16.att[,i])[c(4,2,1,3,5)])
}
# save this version for likert scales
write.csv(ss16.att, "ss2016likerts.csv")
# transform all factors to numeric
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
# deal with missing values
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
# load the full dataset for the demographic statistics
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# load the likert dataset for making the likert graphs
ss16full <- read.table("ss2016likerts.csv", sep=",", header = TRUE, row.names = 1 )
# load the subset of data with the statement variables only
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
summary(ss16full$ika)
summary(ss16full$supu)
summary(ss16full$ika)
summary(ss16full$supu)
# load the full dataset for the demographic statistics
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# load the likert dataset for making the likert graphs
ss16likerts <- read.table("ss2016likerts.csv", sep=",", header = TRUE, row.names = 1 )
# load the subset of data with the statement variables only
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
summary(ss16full$ika)
summary(ss16full$supu)
library(likert)
ss16bar <- likert(ss16likert)
library(likert)
ss16bar <- likert(ss16likerts)
ss16 <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
#### Generating the subset for PCA ####
# creating a sub dataset with attitude factors plus demo
ss16.atti <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k1."))
# dataset with attitude variables only
ss16.att <- dplyr::select(ss16, starts_with("k1."))
# dataset with viisi tärkeintä ominaisuutta ruoalla
# ss16.attr <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k18a"))
# https://www.r-bloggers.com/reorder-factor-levels/
#ss16.att$k1.1 = factor(ss16.att$k1.1,levels(ss16.att$k1.1)[c(4,2,1,3,5)])
# reorder all factor levels
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] = factor(ss16.att[,i],levels(ss16.att[,i])[c(4,2,1,3,5)])
}
# save this version for likert scales
write.csv(ss16.att, "ss2016likerts.csv")
# transform all factors to numeric
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
# deal with missing values
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
# load the full dataset for the demographic statistics
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# load the likert dataset for making the likert graphs
ss16likerts <- read.table("ss2016likerts.csv", sep=",", header = TRUE, row.names = 1 )
# load the subset of data with the statement variables only
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
library(likert)
ss16bar <- likert(ss16likerts)
plot(ss16bar)
knitr::opts_chunk$set(echo = TRUE)
library(likert)
ss16bar <- likert(ss16likerts)
plot(ss16bar)
# creating a sub dataset with attitude factors plus demo
ss16.atti <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k1."))
# dataset with attitude variables only
ss16.att <- dplyr::select(ss16, starts_with("k1."))
# dataset with viisi tärkeintä ominaisuutta ruoalla
# ss16.attr <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k18a"))
# https://www.r-bloggers.com/reorder-factor-levels/
# ss16.att$k1.1 = factor(ss16.att$k1.1,levels(ss16.att$k1.1)[c(4,2,1,3,5)])
# reorder all factor levels
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] = factor(ss16.att[,i],levels(ss16.att[,i])[c(4,2,1,3,5)])
}
# save this version for likert scales
write.csv(ss16.att, "ss2016likerts.csv")
# transform all factors to numeric
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
# deal with missing values
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
library(foreign)
#library(dplyr)
#library(ggplot2)
#library(GGally)
#library(stringr)
#library(tidyr)
ss16.att <- dplyr::select(ss16, starts_with("k1."))
ss16 <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
#### Generating the subset for PCA ####
# creating a sub dataset with attitude factors plus demo
ss16.atti <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k1."))
# dataset with attitude variables only
ss16.att <- dplyr::select(ss16, starts_with("k1."))
# dataset with viisi tärkeintä ominaisuutta ruoalla
# ss16.attr <- dplyr::select(ss16, suuralue, supu, ika, kasvis, lihaton, vegaani, starts_with("k18a"))
# https://www.r-bloggers.com/reorder-factor-levels/
# ss16.att$k1.1 = factor(ss16.att$k1.1,levels(ss16.att$k1.1)[c(4,2,1,3,5)])
# reorder all factor levels
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] = factor(ss16.att[,i],levels(ss16.att[,i])[c(4,2,1,3,5)])
}
# save this version for likert scales
write.csv(ss16.att, "ss2016likerts.csv")
# transform all factors to numeric
for(i in c(1:ncol(ss16.att))) {
ss16.att[,i] <- as.numeric(ss16.att[,i])
}
# deal with missing values
# print out a completeness indicator of the data
complete.cases(ss16.att)
# print out the data along with a completeness indicator as the last column
data.frame(ss16.att[-1], comp = complete.cases(ss16.att))
# filter out all rows with NA values
ss16.att_ <- filter(ss16.att, complete.cases(ss16.att))
# standardize the variables
ss16.att_std <- scale(ss16.att_)
# save the final, scaled and filtered dataset to a file
write.csv(ss16.att_std, "ss2016final.csv")
# load the full dataset for the demographic statistics
ss16full <- read.table("ss2016sub-ao.csv", sep=",", header = TRUE, row.names = 1 )
# load the likert dataset for making the likert graphs
ss16likerts <- read.table("ss2016likerts.csv", sep=",", header = TRUE, row.names = 1 )
# load the subset of data with the statement variables only
ss16 <- read.table("ss2016final.csv", sep=",", header = TRUE, row.names = 1 )
summary(ss16full$ika)
summary(ss16full$supu)
library(likert)
ss16bar <- likert(ss16likerts)
plot(ss16bar)
# reorder all factor levels
for(i in c(1:ncol(ss16likerts))) {
ss16.att[,i] = factor(ss16likerts[,i],levels(ss16likerts[,i])[c(4,2,1,3,5)])
}
library(likert)
ss16bar <- likert(ss16likerts)
plot(ss16bar)
# reorder all factor levels
for(i in c(1:ncol(ss16likerts))) {
ss16likerts[,i] = factor(ss16likerts[,i],levels(ss16likerts[,i])[c(4,2,1,3,5)])
}
library(likert)
ss16bar <- likert(ss16likerts)
plot(ss16bar)
